// Generated by CoffeeScript 1.6.2
/*
Existing problems:
  Can't browse files in SDCard - wanted to check physical order info from /TakeOrder/orders
  Can't display image from SDCard - web view does not have permission
*/


(function() {
  var app;

  app = angular.module('orderApp', ['serviceModule']);

  app.config(function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'partials/main.html',
      controller: 'mainCtrl'
    }).when('/newOrder', {
      templateUrl: 'partials/newOrder.html?random11',
      controller: 'newOrderCtrl'
    }).when('/sampleScan', {
      templateUrl: 'partials/sampleScan.html',
      controller: 'scanCtrl'
    }).otherwise({
      redirectTo: '/'
    });
  });

  /*
    Controllers
  */


  app.controller('mainCtrl', function($scope, $rootScope, catalogService) {
    return $scope.init = function() {
      return catalogService.getCatalog(function(catalog) {
        return $rootScope.catalog = catalog;
      });
    };
  });

  app.controller('newOrderCtrl', function($scope, $rootScope, scannerService, orderService) {
    var deferScanResult;

    deferScanResult = false;
    $scope.init = function() {
      $scope.scanning = false;
      $scope.order = orderService.newOrder();
      return $scope.order.items.push({
        desc: "test description",
        price: "1.35",
        count: 2,
        code: "12345"
      });
    };
    $scope.startScan = function() {
      scannerService.startScan(function(data) {
        var item;

        $scope.scanning = false;
        if (data) {
          $scope.UPC = data;
          item = _.find($rootScope.catalog, function(item) {
            return item.upc === $scope.UPC;
          });
          if (item != null) {
            $scope.desc = item.desc;
            $scope.price = item.price;
            $scope.code = item.code;
          }
        }
        return $scope.$apply();
      });
      return $scope.scanning = true;
    };
    $scope.stopScan = function(data) {
      $scope.scanning = false;
      return scannerService.stopScan();
    };
    $scope.addItem = function() {
      return $scope.order.items.push({
        imagePath: "file:/" + blackberry.io.SDCard + "/TakeOrder/images/icon.png",
        desc: $scope.desc,
        price: $scope.price,
        code: $scope.code,
        count: $scope.count
      });
    };
    $scope.updateItem = function(item) {
      console.log(item);
      $scope.updatingItem = item;
      return $('#updateItemModal').foundation('reveal', 'open');
    };
    return true;
  });

  app.controller("scanCtrl", [
    '$scope', '$location', function($scope, $location) {
      return $scope.init = function() {
        var canvas, codeFound, errorFound, onStartRead, onStopRead, scanTimedOut, scanTimeout;

        canvas = document.getElementById('myCanvas');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        scanTimeout = null;
        errorFound = function(data) {
          return console.log("Error : " + data.error + " description : " + data.description);
        };
        codeFound = function(data) {
          console.log(data);
          $scope.stopBarcodeRead();
          return blackberry.ui.toast.show("Detected : " + data.value);
        };
        onStartRead = function(data) {
          return console.log("Started : " + data.successful);
        };
        onStopRead = function(data) {
          return console.log("Stopped : " + data.successful);
        };
        scanTimedOut = function() {
          $scope.stopBarcodeRead();
          return blackberry.ui.toast.show("No code scanned in 60 seconds. Stopping scanner.");
        };
        $scope.startBarcodeRead = function() {
          blackberry.app.lockOrientation("portrait-primary", false);
          community.barcodescanner.startRead(codeFound, errorFound, "myCanvas", onStartRead);
          return scanTimeout = setTimeout(scanTimedOut, 60000);
        };
        $scope.stopBarcodeRead = function() {
          community.barcodescanner.stopRead(onStopRead, errorFound);
          blackberry.app.unlockOrientation();
          clearTimeout(scanTimeout);
          $location.path("/");
          return $scope.$apply();
        };
        return $scope.startBarcodeRead();
      };
    }
  ]);

  ({
    /*
    Services
    */

    onStartRead: function() {}
  });

  angular.module('serviceModule', []).factory('scannerService', function($timeout) {
    var scannerService;

    scannerService = {
      scanTimeout: false,
      callback: false,
      stopScan: function() {
        blackberry.ui.toast.show("Stopping Scanner...");
        community.barcodescanner.stopRead(this.onStopRead, this.errorFound);
        $timeout.cancel(this.scanTimeout);
        return this.callback(false);
      },
      startScan: function(callback) {
        var canvas, error, foundCode, scanTimeout;

        try {
          this.callback = callback;
          foundCode = false;
          canvas = document.getElementById('scanner');
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
          community.barcodescanner.startRead(function(data) {
            if (!foundCode) {
              foundCode = true;
              $timeout.cancel(scanTimeout);
              community.barcodescanner.stopRead(this.onStopRead, this.errorFound);
              return callback(data.value);
            }
          }, this.errorFound, "scanner", this.onStartRead);
          scanTimeout = $timeout(function() {
            blackberry.ui.toast.show("No code scanned in 60 seconds. Stopping scanner.");
            return scannerService.stopScan();
          }, 60000);
          return this.scanTimeout = scanTimeout;
        } catch (_error) {
          error = _error;
          return alert(error);
        }
      },
      errorFound: function(data) {
        return alert("Error : " + data.error + " description : " + data.description);
      },
      codeFound: function(data) {
        var error;

        try {
          blackberry.ui.toast.show("Detected : " + data.value);
          community.barcodescanner.stopRead(scannerService.onStopRead, scannerService.errorFound);
          clearTimeout(scannerService.scanTimeout);
          return result.resolve(data.value);
        } catch (_error) {
          error = _error;
          return alert(error);
        }
      },
      onStartRead: function(data) {},
      onStopRead: function(data) {}
    };
    return scannerService;
  }).factory("catalogService", function() {
    return {
      callback: false,
      getCatalog: function(callback) {
        var that;

        that = this;
        this.callback = callback;
        if (typeof Storage !== "undefined" && Storage !== null) {
          blackberry.io.sandbox = false;
          if (localStorage.catalogFile == null) {
            blackberry.ui.dialog.customAskAsync("An empty catalog file is being created", ["OK"], function(index) {
              var error;

              try {
                return this.createFS();
              } catch (_error) {
                error = _error;
                return alert(error);
              }
            }, {
              title: "Catalog file is not available"
            });
          }
          window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
          return window.requestFileSystem(window.PERSISTENT, 5 * 1024 * 1024, function(fs) {
            return fs.root.getFile(blackberry.io.SDCard + '/TakeOrder/catalog.json', {
              create: false,
              exclusive: true
            }, function(fileEntry) {
              return fileEntry.file(function(file) {
                var reader;

                reader = new FileReader();
                reader.onload = function(e) {
                  var catalog, error;

                  catalog = JSON.parse(e.target.result);
                  try {
                    return callback(catalog);
                  } catch (_error) {
                    error = _error;
                    return alert("catalog callback " + error);
                  }
                };
                reader.onerror = function(e) {
                  return alert("Error reading catalog file " + e.target.error);
                };
                return reader.readAsText(file, "UTF-8");
              }, that.errorFS);
            }, that.errorFS);
          }, that.errorFS);
        }
      },
      createFS: function() {
        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        return window.requestFileSystem(window.PERSISTENT, 5 * 1024 * 1024, this.initFS, this.errorFS);
      },
      initFS: function(fs) {
        var that;

        that = this;
        return fs.root.getDirectory(blackberry.io.SDCard + '/TakeOrder', {
          create: true
        }, function(dirEntry) {
          return fs.root.getFile(blackberry.io.SDCard + '/TakeOrder/catalog.json', {
            create: true
          }, function(fileEntry) {
            return fileEntry.createWriter(function(fileWriter) {
              var bb;

              window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder;
              bb = new BlobBuilder();
              bb.append('{}');
              fileWriter.write(bb.getBlob('text/plain'));
              return localStorage.catalogFile = blackberry.io.SDCard + '/TakeOrder/catalog.json';
            }, that.errorFS);
          }, that.errorFS);
        }, that.errorFS);
      },
      errorFS: function(err) {
        var error, msg;

        try {
          msg = "File System Error: ";
          switch (err.code) {
            case FileError.NOT_FOUND_ERR:
              msg += 'File or directory not found';
              break;
            case FileError.NOT_READABLE_ERR:
              msg += 'File or directory not readable';
              break;
            case FileError.PATH_EXISTS_ERR:
              msg += 'File or directory already exists';
              break;
            case FileError.TYPE_MISMATCH_ERR:
              msg += 'Invalid filetype';
              break;
            default:
              msg += 'unknown error';
          }
        } catch (_error) {
          error = _error;
          alert(error);
        }
        return alert(msg);
      }
    };
  }).factory("orderService", function() {
    return {
      listOrders_LEGACY: function(callback) {
        var that;

        alert("ListOrders");
        that = this;
        blackberry.io.sandbox = false;
        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        return window.requestFileSystem(window.PERSISTENT, 1024 * 1024, function(fs) {
          return fs.root.getDirectory(blackberry.io.SDCard + '/TakeOrder/orders/', {
            create: true
          }, function(dirEntry) {
            var dirReader;

            dirReader = dirEntry.createReader();
            return dirReader.readEntries(function(entries) {
              var entry, _i, _len, _results;

              alert(entries);
              _results = [];
              for (_i = 0, _len = entries.length; _i < _len; _i++) {
                entry = entries[_i];
                _results.push(alert(entry.fullPath));
              }
              return _results;
            }, that.errorFS);
          }, that.errorFS);
        }, that.errorFS);
      },
      listOrders: function(callback) {},
      getOrder: function(orderName) {},
      newOrder: function() {
        var order;

        order = {};
        if (localStorage.orderCounter == null) {
          localStorage.orderCounter = 1;
        }
        order.id = localStorage.orderCounter;
        order.items = [];
        return order;
      },
      deleteOrder: function(orderName) {},
      saveOrder: function(order) {},
      errorFS: function(err) {
        var error, msg;

        try {
          msg = "File System Error: ";
          switch (err.code) {
            case FileError.NOT_FOUND_ERR:
              msg += 'File or directory not found';
              break;
            case FileError.NOT_READABLE_ERR:
              msg += 'File or directory not readable';
              break;
            case FileError.PATH_EXISTS_ERR:
              msg += 'File or directory already exists';
              break;
            case FileError.TYPE_MISMATCH_ERR:
              msg += 'Invalid filetype';
              break;
            case FileError.SECURITY_ERR:
              msg += 'Security error';
              break;
            default:
              msg += 'unknown error';
          }
        } catch (_error) {
          error = _error;
          alert(error);
        }
        return alert(msg);
      }
    };
  });

}).call(this);
