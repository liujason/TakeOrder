// Generated by CoffeeScript 1.6.2
(function() {
  var app;

  app = angular.module('orderApp', ['serviceModule']);

  app.config(function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'partials/main.html',
      controller: 'mainCtrl'
    }).when('/newOrder', {
      templateUrl: 'partials/newOrder.html',
      controller: 'newOrderCtrl'
    }).when('/sampleScan', {
      templateUrl: 'partials/sampleScan.html',
      controller: 'scanCtrl'
    }).otherwise({
      redirectTo: '/'
    });
  });

  /*
    Controllers
  */


  app.controller('mainCtrl', function($scope) {
    $scope.init = function() {
      if (typeof Storage !== "undefined" && Storage !== null) {
        if (localStorage.catalogFile == null) {
          return blackberry.ui.dialog.customAskAsync("An empty catalog file is being created", ["OK"], function(index) {
            var error;

            try {
              return $scope.createFS();
            } catch (_error) {
              error = _error;
              return alert(error);
            }
          }, {
            title: "Catalog file is not available"
          });
        }
      }
    };
    $scope.createFS = function() {
      blackberry.io.sandbox = false;
      window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
      return window.requestFileSystem(window.PERSISTENT, 5 * 1024 * 1024, $scope.initFS, $scope.errorFS);
    };
    $scope.initFS = function(fs) {
      return fs.root.getDirectory(blackberry.io.SDCard + '/TakeOrder', {
        create: true
      }, function(dirEntry) {
        return fs.root.getFile(blackberry.io.SDCard + '/TakeOrder/catalog.json', {
          create: true
        }, function(fileEntry) {
          return fileEntry.createWriter(function(fileWriter) {
            var bb;

            window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder;
            bb = new BlobBuilder();
            bb.append('{}');
            fileWriter.write(bb.getBlob('text/plain'));
            return localStorage.catalogFile = blackberry.io.SDCard + '/TakeOrder/catalog.json';
          }, $scope.errorFS);
        }, $scope.errorFS);
      }, $scope.errorFS);
    };
    return $scope.errorFS = function(err) {
      var error, msg;

      try {
        msg = "File System Error: ";
        switch (err.code) {
          case FileError.NOT_FOUND_ERR:
            msg += 'File or directory not found';
            break;
          case FileError.NOT_READABLE_ERR:
            msg += 'File or directory not readable';
            break;
          case FileError.PATH_EXISTS_ERR:
            msg += 'File or directory already exists';
            break;
          case FileError.TYPE_MISMATCH_ERR:
            msg += 'Invalid filetype';
            break;
          default:
            msg += 'unknown error';
        }
      } catch (_error) {
        error = _error;
        alert(error);
      }
      return alert(msg);
    };
  });

  app.controller('newOrderCtrl', function($scope, $q, scannerService) {
    var deferScanResult;

    deferScanResult = false;
    $scope.init = function() {
      return $scope.scanning = false;
    };
    $scope.startScan = function() {
      scannerService.startScan(function(data) {
        $scope.scanning = false;
        if (data) {
          $scope.UPC = data;
        }
        return $scope.$apply();
      });
      return $scope.scanning = true;
    };
    return $scope.stopScan = function(data) {
      $scope.scanning = false;
      return scannerService.stopScan();
    };
  });

  app.controller("scanCtrl", [
    '$scope', '$location', function($scope, $location) {
      return $scope.init = function() {
        var canvas, codeFound, errorFound, onStartRead, onStopRead, scanTimedOut, scanTimeout;

        canvas = document.getElementById('myCanvas');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        scanTimeout = null;
        errorFound = function(data) {
          return console.log("Error : " + data.error + " description : " + data.description);
        };
        codeFound = function(data) {
          console.log(data);
          $scope.stopBarcodeRead();
          return blackberry.ui.toast.show("Detected : " + data.value);
        };
        onStartRead = function(data) {
          return console.log("Started : " + data.successful);
        };
        onStopRead = function(data) {
          return console.log("Stopped : " + data.successful);
        };
        scanTimedOut = function() {
          $scope.stopBarcodeRead();
          return blackberry.ui.toast.show("No code scanned in 60 seconds. Stopping scanner.");
        };
        $scope.startBarcodeRead = function() {
          blackberry.app.lockOrientation("portrait-primary", false);
          community.barcodescanner.startRead(codeFound, errorFound, "myCanvas", onStartRead);
          return scanTimeout = setTimeout(scanTimedOut, 60000);
        };
        $scope.stopBarcodeRead = function() {
          community.barcodescanner.stopRead(onStopRead, errorFound);
          blackberry.app.unlockOrientation();
          clearTimeout(scanTimeout);
          $location.path("/");
          return $scope.$apply();
        };
        return $scope.startBarcodeRead();
      };
    }
  ]);

  ({
    /*
    Services
    */

    onStartRead: function() {}
  });

  angular.module('serviceModule', []).factory('scannerService', function($timeout) {
    var scannerService;

    scannerService = {
      scanTimeout: false,
      callback: false,
      stopScan: function() {
        blackberry.ui.toast.show("Stopping Scanner...");
        community.barcodescanner.stopRead(this.onStopRead, this.errorFound);
        $timeout.cancel(this.scanTimeout);
        return this.callback(false);
      },
      startScan: function(callback) {
        var canvas, error, foundCode, scanTimeout;

        try {
          this.callback = callback;
          foundCode = false;
          canvas = document.getElementById('scanner');
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
          community.barcodescanner.startRead(function(data) {
            if (!foundCode) {
              foundCode = true;
              $timeout.cancel(scanTimeout);
              community.barcodescanner.stopRead(this.onStopRead, this.errorFound);
              return callback(data.value);
            }
          }, this.errorFound, "scanner", this.onStartRead);
          scanTimeout = $timeout(function() {
            blackberry.ui.toast.show("No code scanned in 60 seconds. Stopping scanner.");
            return scannerService.stopScan();
          }, 5000);
          return this.scanTimeout = scanTimeout;
        } catch (_error) {
          error = _error;
          return alert(error);
        }
      },
      errorFound: function(data) {
        return alert("Error : " + data.error + " description : " + data.description);
      },
      codeFound: function(data) {
        var error;

        try {
          blackberry.ui.toast.show("Detected : " + data.value);
          community.barcodescanner.stopRead(scannerService.onStopRead, scannerService.errorFound);
          clearTimeout(scannerService.scanTimeout);
          return result.resolve(data.value);
        } catch (_error) {
          error = _error;
          return alert(error);
        }
      },
      onStartRead: function(data) {},
      onStopRead: function(data) {}
    };
    return scannerService;
  });

}).call(this);
